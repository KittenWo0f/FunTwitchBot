from bot_settings import *
from some_data import *
from twitchio.ext import commands
from twitchio.user import User
from twitchio.channel import Channel
from db_client import DbMessageLogClient

import datetime
from dateutil import tz
import random
import re
import http3
from bot_utilities import *

from gpiozero import CPUTemperature

class Bot(commands.Bot):

    name = str()
    dbLogClient = DbMessageLogClient(DB_CONNECTION_STRING)
    
    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self, name):
        super().__init__(token=ACCESS_TOKEN, prefix=PREFIX, initial_channels=INITIAL_CHANNELS)
        self.dbLogClient.Connect()

    #–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async def event_ready(self):
        print(f'–í–æ—à–µ–ª –∫–∞–∫ | {self.nick}')
        print(f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | {self.user_id}')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def event_message(self, message):        
        if message.echo:
            author_id = self.user_id 
            author_name = self.nick
        else:
            author_id = message.author.id 
            author_name = message.author.name
       
        utcTime = message.timestamp
        utcTime = utcTime.replace(tzinfo=tz.tzutc())
        localTime = utcTime.astimezone(tz.tzlocal())
        print(f'{localTime}({message.channel.name}){author_name}:{message.content}')
        channelUser = await message.channel.user(False)
        self.dbLogClient.InsertMessage(message.content, author_id, author_name, channelUser, localTime)
        
        if message.echo:
            return
        
        if str(message.content).startswith(PREFIX):
            await self.handle_commands(message)
            return
        
        #–û–ø—É—Å–∫–∞–Ω–∏–µ –º—É–±–æ—Ç–∞
        if message.author.name == 'moobot':
            await message.channel.send(f'@{message.author.name}, –º—É–±–æ—Ç —Å–æ—Å–∏')
            return

        #–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞—Ç—Å—Ç–≤–∏—è
        lower_message = message.content.lower();
        check_str = re.split(r',|!|;|\.|\?', message.content)[0]
        if check_str in hellos:
            await message.channel.send(f'@{message.author.name}, {random.choice(hellos)}')
            return
        if check_str in byes:
            await message.channel.send(f'@{message.author.name}, {random.choice(byes)}')
            return
        
        if '–¥–≤–∞—á' in lower_message:
            await message.channel.send(f'@{message.author.name},  –¥–≤–∞—á–µ—Ä—ã —Å–æ—Å—É—Ç –±–æ–ª—å—à–æ–π –∏ —Ç–æ–ª—Å—Ç—ã–π (–ª–µ–¥–µ–Ω–µ—Ü) KappaPride')
            return
        
        if check_str in custom_copypast_cmd and message.channel.name in ALLOW_FLOOD:
            await message.channel.send(check_str)
            return
            
        if(str(f'@{self.nick}') in str(message.content).lower()):
            await message.channel.send(f'@{message.author.name}, {random.choice(bot_messages)}')
            return
        
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @commands.command(name='—Ç–≥', aliases=['—Ç–µ–ª–µ–≥—Ä–∞–º', '—Ç–µ–ª–µ–≥–∞', 'telegram', 'tg'])
    async def telegram(self, ctx: commands.Context):
        msg = telegrams.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', aliases=['–≤–∫', 'vk', 'vkontakte'])
    async def vkontakte(self, ctx: commands.Context):
        msg = vks.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
            
    @commands.command(name='–±—É—Å—Ç–∏', aliases=['boosty', '–∫–æ—à–∫–∞'])
    async def boosty(self, ctx: commands.Context):
        msg = boostys.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
                    
    @commands.command(name='–¥–æ–Ω–∞—Ç', aliases=['donat', '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ'])
    async def donat(self, ctx: commands.Context):
        msg = donats.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='–º–µ–º', aliases=['–º–µ–º–µ', 'meme'])
    async def meme(self, ctx: commands.Context):
        msg = memes.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='—Å–º–∞–π–ª—ã', aliases=['7tv', 'smiles', 'emoji', '—Å–º–∞–π–ª–∏–∫–∏', '—ç–º–æ—É—Ç—ã'])
    async def SpecialSmiles(self, ctx: commands.Context):
        if ctx.channel.name in ALLOW_URL:
            await ctx.send('–ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏ –ø–æ—Å—ã–ª–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å–º–∞–π–ª—ã –≤ —á–∞—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://7tv.app/')
        
    @commands.command(name='help', aliases=['commands', '–∫–æ–º–∞–Ω–¥—ã', '–ø–æ–º–æ—â—å', '–±–æ—Ç'])
    async def help_bot(self, ctx: commands.Context):
        await ctx.send(f'@{ctx.author.name} –Ø –±–æ—Ç –∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é 4Head')
    
    @commands.cooldown(rate=1, per=60, bucket=commands.Bucket.channel)
    @commands.command(name='lastseen', aliases=['–∫–æ–≥–¥–∞–≤–∏–¥–µ–ª–∏'])
    async def last_seen(self, ctx: commands.Context):
        channel_user = await ctx.channel.user()
        last_activity = self.dbLogClient.GetUserLastActivity(channel_user.id)
        if (last_activity):
            await ctx.send(f'@{ctx.author.name}, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ {ctx.channel.name} –≤–∏–¥–µ–ª–∏ –≤ —á–∞—Ç–µ {last_activity.strftime("%d.%m.%Y –≤ %H:%M:%S")} CoolStoryBob');
        else:
            await ctx.send(f'@{ctx.author.name}, —è –Ω–µ –ø–æ–º–Ω—é –∫–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ {ctx.channel.name} PoroSad');
    
    @commands.cooldown(rate=1, per=300, bucket=commands.Bucket.member)
    @commands.command(name='followage', aliases=['–≤–æ–∑—Ä–∞—Å—Ç–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'])
    async def followage(self, ctx: commands.Context):    
        if ctx.author.name == ctx.channel.name:
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è CoolStoryBob')
            return
        client = http3.AsyncClient()
        r = await client.get(f'https://api.ivr.fi/v2/twitch/subage/{ctx.author.name}/{ctx.channel.name}')
        if r.status_code >= 400:
            await ctx.send(f'@{ctx.author.name}, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è PoroSad')
            return
        followedAt = r.json()["followedAt"]
        if followedAt :
            follow_age = datetime.datetime.now() - datetime.datetime.fromisoformat(followedAt.replace('Z',''))
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –∫–∞–Ω–∞–ª {ctx.channel.name} {follow_age.days} –¥–Ω–µ–π SeemsGood')
        else:
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –∫–∞–Ω–∞–ª {ctx.channel.name} D:')
            
    @commands.cooldown(rate=1, per=300, bucket=commands.Bucket.channel)
    @commands.command(name='–¥–µ–Ω—å')
    async def whatdaytoday(self, ctx: commands.Context):
        await ctx.send(f'@{ctx.author.name}, {GetTodayHoliday()}')
        
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='–ø–æ–≥–æ–¥–∞', aliases=['weather'])
    async def weather(self, ctx: commands.Context):
        url = "https://weatherapi-com.p.rapidapi.com/current.json"
        arg = ctx.message.content.rstrip(' ').split(' ', 1)[1]
        querystring = {"q":arg,"lang":"ru"}
        client = http3.AsyncClient()
        response = await client.get(url, headers=weather_headers, params=querystring)
        if response.status_code < 400:
            jsonR = response.json()
            await ctx.send(f'@{ctx.author.name}, –≤ {jsonR["location"]["name"]} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {jsonR["current"]["temp_c"]}¬∞C. {jsonR["current"]["condition"]["text"]} peepoPls')
        else:
            await ctx.send(f'@{ctx.author.name}, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã PoroSad')
        
    #–ö–æ–º–∞–Ω–¥—ã –ø–æ–¥ –æ—Ñ—Ñ–ª–∞–π–Ω —á–∞—Ç 
    @commands.cooldown(rate=1, per=10, bucket=commands.Bucket.member)
    @commands.command(name='—á–º–æ–∫')
    async def chmok(self, ctx: commands.Context):
        if await self.is_stream_online(ctx.channel):
            return
        sArgs = ctx.message.content.rstrip(' ').split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–∫–æ–≥–æ —á–º–æ–∫–Ω—É—Ç—å PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª @{random.choice(tuple(ctx.chatters)).name} üòò')
        else:
            if not IsValidArgs(sArgs[1].rstrip(' ')):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            elif ctx.author.name in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name} –±–æ—é—Å—å —á—Ç–æ —ç—Ç–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ? –î–∞–≤–∞–π –ª—É—á—à–µ —è üòò')
            elif self.nick in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name}, –∏ —Ç–µ–±–µ —á–º–æ–∫ üòò')
            else:
                await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª {str(sArgs[1])} üòò')
                
    @commands.cooldown(rate=1, per=10, bucket=commands.Bucket.member)
    @commands.command(name='–ª–∞–ø–æ—á–∫–∞')
    async def lapochka(self, ctx: commands.Context):
        if await self.is_stream_online(ctx.channel):
            return
        sArgs = ctx.message.content.rstrip(' ').split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø—É—Å—Ç–æ PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª –ª–∞–ø–æ—á–∫–æ–π @{random.choice(tuple(ctx.chatters)).name} <3')
        else:
            if not IsValidArgs(sArgs[1].rstrip(' ')):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            elif ctx.author.name in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name} –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —ç—Ç–æ —Ö–æ—Ä–æ—à–æ SeemsGood')
            elif self.nick in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name}, –æ–π —Å–ø–∞—Å–∏–±–æ bleedPurple')
            else:
                await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª –ª–∞–ø–æ—á–∫–æ–π {str(sArgs[1])} <3')
                
    @commands.cooldown(rate=1, per=10, bucket=commands.Bucket.channel)
    @commands.command(name='–∞–Ω–µ–∫', aliases=['–∫—Ä–∏–Ω–∂'])
    async def anek(self, ctx: commands.Context):
        if await self.is_stream_online(ctx.channel):
            return
        await ctx.send(GetRandAnek())
        
    #–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ 
    @commands.command(name='–≥–æ—Ä—è—á–µ—Å—Ç—å', aliases=['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '—Ç–µ–º–ø', 'temp'])
    async def temperature(self, ctx: commands.Context):
        if ctx.author.name in white_list:
            cpuT = CPUTemperature()
            await ctx.send(f'–ú–æ—è –≥–æ—Ä—è—á–µ—Å—Ç—å —Ä–∞–≤–Ω–∞ {cpuT.temperature} –≥—Ä–∞–¥—É—Å–∞–º')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    async def event_command_error(self, ctx, error: Exception) -> None:
        if isinstance(error, commands.CommandOnCooldown) and not await self.is_stream_online(ctx.channel):
            await ctx.send(f'–ö–æ–º–∞–Ω–¥–∞ "{error.command.name}" –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è, –µ—â–µ {int(error.retry_after)} —Å–µ–∫.') 
        print(error)
    
    #–°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
    async def event_join(self, channel: Channel, user: User):
        print(f'{datetime.datetime.now()}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –≤–æ—à–µ–ª –≤ —á–∞—Ç {channel.name}')
        if channel.name == user.name:
            channel_user = await channel.user() #id –æ—Ç—Å—É—Ç–≤—É–µ—Ç –≤ User –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
            await channel.send(f'@{channel_user.name}, –ø—Ä–∏–≤–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä! üòò')
            self.dbLogClient.UpdateUserLastActivity(channel_user.id, channel_user.name, datetime.datetime.now())
            print(f'{datetime.datetime.now()}: –°—Ç—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ {channel_user.name}')
    
    #–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏        
    async def is_stream_online(self, channel) -> bool:
        chan_user = await channel.user()
        streams = await self.fetch_streams([chan_user.id])
        if len(streams) == 0:
            return False
        return True

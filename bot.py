from bot_settings import *
from some_data import *
from twitchio.ext import commands
from twitchio.user import User
from twitchio.channel import Channel

import datetime
import random
import re
from bot_utilities import *

from gpiozero import CPUTemperature

class Bot(commands.Bot):

    name = str()
    last_seen_dict = dict()
    
    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self, name):
        self.name = name
        tmpfile = load_obj(self.name + '_last_seen_dict')
        if tmpfile: self.last_seen_dict = tmpfile
        super().__init__(token=ACCESS_TOKEN, prefix=PREFIX, initial_channels=INITIAL_CHANNELS)
        
    def save_objects(self):
        save_obj(self.last_seen_dict, self.name + '_last_seen_dict')

    #–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async def event_ready(self):
        print(f'–í–æ—à–µ–ª –∫–∞–∫ | {self.nick}')
        print(f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | {self.user_id}')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def event_message(self, message):
        if message.echo:
            return
        print(f'{message.timestamp}({message.channel.name}){message.author.name}:{message.content}')
        
        if str(message.content).startswith(PREFIX):
            await self.handle_commands(message)
            return
        
        #–û–ø—É—Å–∫–∞–Ω–∏–µ –º—É–±–æ—Ç–∞
        if message.author.name == 'moobot':
            await message.channel.send(f'@{message.author.name}, –º—É–±–æ—Ç —Å–æ—Å–∏')
            return

        #–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞—Ç—Å—Ç–≤–∏—è
        check_str = re.split(r',|!|;|\.|\?', message.content)[0]
        cust_com = custom_commands_with_tag.get(str(check_str.lower()))
        if cust_com and message.channel.name in ALLOW_FLOOD:
            await message.channel.send(f'@{message.author.name}, {random.choice(cust_com)}')
            return
        
        if check_str in custom_copypast_cmd and message.channel.name in ALLOW_FLOOD:
            await message.channel.send(check_str)
            return
            
        if(str(f'@{self.nick}') in str(message.content).lower()):
            await message.channel.send(f'@{message.author.name}, {random.choice(bot_messages)}')
            return
            
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @commands.command(name='—Ç–≥', aliases=['—Ç–µ–ª–µ–≥—Ä–∞–º', '—Ç–µ–ª–µ–≥–∞', 'telegram', 'tg'])
    async def telegram(self, ctx: commands.Context):
        msg = telegrams.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', aliases=['–≤–∫', 'vk', 'vkontakte'])
    async def vkontakte(self, ctx: commands.Context):
        msg = vks.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
            
    @commands.command(name='–±—É—Å—Ç–∏', aliases=['boosty', '–∫–æ—à–∫–∞'])
    async def boosty(self, ctx: commands.Context):
        msg = boostys.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
                    
    @commands.command(name='–¥–æ–Ω–∞—Ç', aliases=['donat', '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ'])
    async def donat(self, ctx: commands.Context):
        msg = donats.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='—Å–º–∞–π–ª—ã', aliases=['7tv', 'smiles', 'emoji', '—Å–º–∞–π–ª–∏–∫–∏', '—ç–º–æ—É—Ç—ã'])
    async def SpecialSmiles(self, ctx: commands.Context):
        if ctx.channel.name in ALLOW_URL:
            await ctx.send('–ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏ –ø–æ—Å—ã–ª–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å–º–∞–π–ª—ã –≤ —á–∞—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://7tv.app/')
        
    @commands.command(name='help', aliases=['commands', '–∫–æ–º–∞–Ω–¥—ã', '–ø–æ–º–æ—â—å', '–±–æ—Ç'])
    async def help_bot(self, ctx: commands.Context):
        await ctx.send(f'@{ctx.author.name} –Ø –±–æ—Ç –∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é 4Head')
    
    @commands.cooldown(rate=1, per=60, bucket=commands.Bucket.channel)
    @commands.command(name='lastseen', aliases=['–∫–æ–≥–¥–∞–≤–∏–¥–µ–ª–∏'])
    async def last_seen(self, ctx: commands.Context):
        if (ctx.channel.name in self.last_seen_dict):
            await ctx.send(f'@{ctx.author.name}, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ {ctx.channel.name} –≤–∏–¥–µ–ª–∏ –≤ —á–∞—Ç–µ {self.last_seen_dict[ctx.channel.name].strftime("%d.%m.%Y –≤ %H:%M:%S")} CoolStoryBob');
        else:
            await ctx.send(f'@{ctx.author.name}, —è –Ω–µ –ø–æ–º–Ω—é –∫–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ {ctx.channel.name} PoroSad');
    
    @commands.cooldown(rate=1, per=300, bucket=commands.Bucket.member)
    @commands.command(name='followage', aliases=['–≤–æ–∑—Ä–∞—Å—Ç–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'])
    async def followage(self, ctx: commands.Context):
        user = await ctx.author.user()
        if ctx.author.name == ctx.channel.name:
            follow_date = user.created_at
        else:
            channel = await ctx.channel.user()
            follow = await user.fetch_follow(channel)
            follow_date = follow.followed_at
        if follow_date:
            follow_age = datetime.datetime.now().replace(tzinfo=datetime.timezone.utc) - follow_date
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –∫–∞–Ω–∞–ª {ctx.channel.name} {follow_age.days} –¥–Ω–µ–π SeemsGood')
        else:
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –∫–∞–Ω–∞–ª {ctx.channel.name} D:')
        
    #–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ 
    @commands.command(name='–≥–æ—Ä—è—á–µ—Å—Ç—å', aliases=['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '—Ç–µ–º–ø', 'temp'])
    async def temperature(self, ctx: commands.Context):
        if ctx.author.name in white_list:
            cpuT = CPUTemperature()
            await ctx.send(f'–ú–æ—è –≥–æ—Ä—è—á–µ—Å—Ç—å —Ä–∞–≤–Ω–∞ {cpuT.temperature} –≥—Ä–∞–¥—É—Å–∞–º')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    async def event_command_error(self, ctx, error: Exception) -> None:
        #if isinstance(error, commands.CommandOnCooldown):
        #    await ctx.send(f'–ö–æ–º–∞–Ω–¥–∞ "{error.command.name}" –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è, –µ—â–µ {int(error.retry_after)} —Å–µ–∫.') 
        print(error)
    
    #–°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
    async def event_join(self, channel: Channel, user: User):
        print(f'{datetime.datetime.now()}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –≤–æ—à–µ–ª –≤ —á–∞—Ç {channel.name}')
        if channel.name == user.name:
            await channel.send(f'@{user.name}, –ø—Ä–∏–≤–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä! üòò')
            self.last_seen_dict[user.name] = datetime.datetime.now()
            print(f'{datetime.datetime.now()}: –°—Ç—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ {user.name}')
from bot_settings import *
from twitchio.ext import commands
from twitchio.user import User
from twitchio.channel import Channel

import time
import datetime
import random
from bot_utilities import *

class Bot(commands.Bot):

    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self):
        super().__init__(token=ACCESS_TOKEN, prefix='!', initial_channels=INITIAL_CHANNELS)

    #–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async def event_ready(self):
        print(f'–í–æ—à–µ–ª –∫–∞–∫ | {self.nick}')
        print(f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | {self.user_id}')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def event_message(self, message):
        if message.echo:
            return
        print(f'{message.timestamp}({message.channel.name}){message.author.name}:{message.content}')

        if message.author.name == 'moobot':
            await message.channel.send(f'@{message.author.name}, –º—É–±–æ—Ç —Å–æ—Å–∏')
        elif message.author.name == 'gufather':
            time.sleep(2)
            await message.channel.send(f'—Ö–æ—Ä–æ—à–∏–π –±–æ—Ç {GetRandomEmotion()}')
        await self.handle_commands(message)

    #–ö–æ–º–∞–Ω–¥—ã
    @commands.command(name='–ø—Ä–∏–≤–µ—Ç')
    async def hello(self, ctx: commands.Context):
        await ctx.send(f'–ó–¥–æ—Ä–æ–≤–∞ –∑–∞–µ–±–∞–ª, @{ctx.author.name}!')
        
    @commands.command(name='–ø–æ–∫–∞')
    async def bye(self, ctx: commands.Context):
        await ctx.send(f'–ù–µ —É—Ö–æ–¥–∏, @{ctx.author.name} PoroSad')

    @commands.command(name='–ø–∏–Ω–≥')
    async def ping(self, ctx: commands.Context):
        await ctx.send(f'–ü–æ–Ω–≥ {ctx.author.name}!')

    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='—á–º–æ–∫')
    async def chmok(self, ctx: commands.Context):
        sArgs = ctx.message.content.split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–∫–æ–≥–æ —á–º–æ–∫–Ω—É—Ç—å PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª @{random.choice(tuple(ctx.chatters)).name} üòò')
        else:
            if not IsValidArgs(sArgs[1]):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            else:
                await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª {str(sArgs[1])} üòò')
                
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='—á–º–æ')
    async def chmo(self, ctx: commands.Context):
        sArgs = ctx.message.content.split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø—É—Å—Ç–æ PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª —á–º–æ–º @{random.choice(tuple(ctx.chatters)).name} ü§™')
        else:
            if not IsValidArgs(sArgs[1]):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            else:
                await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª —á–º–æ–º {str(sArgs[1])} ü§™')
            
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='–±–∞–∑–∞')
    async def baza(self, ctx: commands.Context):
        await ctx.send(f'—Ö—É—è–∑–∞')
        
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.channel)
    @commands.command(name='–∞–Ω–µ–∫')
    async def anek(self, ctx: commands.Context):
        await ctx.send(GetRandAnek())
    
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @commands.command(name='—Ç–≥', aliases=['—Ç–µ–ª–µ–≥—Ä–∞–º', '—Ç–µ–ª–µ–≥–∞', 'telegram', 'tg'])
    async def telegram(self, ctx: commands.Context):
        msg = telegrams.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', aliases=['–≤–∫', 'vk', 'vkontakte'])
    async def vkontakte(self, ctx: commands.Context):
        msg = vks.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
            
    @commands.command(name='–±—É—Å—Ç–∏', aliases=['boosty'])
    async def boosty(self, ctx: commands.Context):
        msg = boostys.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)        

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    async def event_command_error(self, ctx, error: Exception) -> None:
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f'–ö–æ–º–∞–Ω–¥–∞ "{error.command.name}" –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –µ—â–µ {int(error.retry_after)} —Å–µ–∫.')
        else:
            print(error)
    
    #–°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
    async def event_join(self, channel: Channel, user: User):
        if channel.name == user.name:
            await channel.send(f'@{user.name}, –ø—Ä–∏–≤–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä! üòò')
            print(f'{datetime.datetime.now()}: –°—Ç—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ {user.name}')
        print(f'{datetime.datetime.now()}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –≤–æ—à–µ–ª –≤ —á–∞—Ç {channel.name}')

bot = Bot()
bot.run()

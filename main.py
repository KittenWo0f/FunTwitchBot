from bot_settings import *
from some_data import *
from twitchio.ext import commands
from twitchio.user import User
from twitchio.channel import Channel

import time
import datetime
import random
import re
from bot_utilities import *

from gpiozero import CPUTemperature

class Bot(commands.Bot):

    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self):
        super().__init__(token=ACCESS_TOKEN, prefix=PREFIX, initial_channels=INITIAL_CHANNELS)

    #–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async def event_ready(self):
        print(f'–í–æ—à–µ–ª –∫–∞–∫ | {self.nick}')
        print(f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | {self.user_id}')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def event_message(self, message):
        if message.echo:
            return
        print(f'{message.timestamp}({message.channel.name}){message.author.name}:{message.content}')
        
        if str(message.content).startswith(PREFIX):
            await self.handle_commands(message)
            return
        
        #–û–ø—É—Å–∫–∞–Ω–∏–µ –º—É–±–æ—Ç–∞
        if message.author.name == 'moobot':
            await message.channel.send(f'@{message.author.name}, –º—É–±–æ—Ç —Å–æ—Å–∏')
            return

        check_str = re.split(r',|!|;|\.|\?', message.content)[0]
        cust_com = custom_commands_with_tag.get(str(check_str.lower()))
        if(cust_com):
            await message.channel.send(f'@{message.author.name}, {random.choice(cust_com)}')
            return
        
        if(check_str in custom_copypast_cmd):
            await message.channel.send(check_str)
            return
            
        if(str(f'@{self.nick}') in str(message.content).lower()):
            await message.channel.send(f'@{message.author.name}, {random.choice(bot_messages)}')
            return
            

    # #–ö–æ–º–∞–Ω–¥—ã
    # @commands.command(name='–ø—Ä–∏–≤–µ—Ç', aliases=['hello'])
    # async def hello(self, ctx: commands.Context):
    #     await ctx.send(f'–ó–¥–æ—Ä–æ–≤–∞ –∑–∞–µ–±–∞–ª, @{ctx.author.name}!')
        
    # @commands.command(name='–ø–æ–∫–∞', aliases=['bye'])
    # async def bye(self, ctx: commands.Context):
    #     await ctx.send(f'–ù–µ —É—Ö–æ–¥–∏, @{ctx.author.name} PoroSad')

    @commands.command(name='–ø–∏–Ω–≥', aliases=['ping'])
    async def ping(self, ctx: commands.Context):
        await ctx.send(f'–ü–æ–Ω–≥ {ctx.author.name}!')

    @commands.cooldown(rate=1, per=10, bucket=commands.Bucket.member)
    @commands.command(name='—á–º–æ–∫')
    async def chmok(self, ctx: commands.Context):
        sArgs = ctx.message.content.rstrip(' ').split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–∫–æ–≥–æ —á–º–æ–∫–Ω—É—Ç—å PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª @{random.choice(tuple(ctx.chatters)).name} üòò')
        else:
            if not IsValidArgs(sArgs[1].rstrip(' ')):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            elif ctx.author.name in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name} –±–æ—é—Å—å —á—Ç–æ —ç—Ç–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ? –î–∞–≤–∞–π –ª—É—á—à–µ —è üòò')
            elif self.nick in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name}, –∏ —Ç–µ–±–µ —á–º–æ–∫ üòò')
            else:
                await ctx.send(f'@{ctx.author.name} —á–º–æ–∫–Ω—É–ª {str(sArgs[1])} üòò')
                
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='—á–º–æ')
    async def chmo(self, ctx: commands.Context):
        sArgs = ctx.message.content.rstrip(' ').split(' ', 1)
        if len(ctx.chatters) == 0:
            await ctx.send('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø—É—Å—Ç–æ PoroSad')
        elif len(sArgs) == 1:
            await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª —á–º–æ–º @{random.choice(tuple(ctx.chatters)).name} ü§™')
        else:
            if not IsValidArgs(sArgs[1].rstrip(' ')):
                await ctx.send(f'@{ctx.author.name}, –±–∞–Ω–∞ —Ö–æ—á–µ—à—å –º–æ–µ–≥–æ?')
            elif ctx.author.name in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name} –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ —Å —Å–æ–±–æ–π Stare')
            elif self.nick in sArgs[1].lower():
                await ctx.send(f'@{ctx.author.name}, —á—Ç–æ —è —Ç–µ–±–µ –ø–ª–æ—Ö–æ–≥–æ —Å–¥–µ–ª–∞–ª? PoroSad')
            else:
                await ctx.send(f'@{ctx.author.name} –Ω–∞–∑–≤–∞–ª —á–º–æ–º {str(sArgs[1])} ü§™')
            
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.member)
    @commands.command(name='–±–∞–∑–∞')
    async def baza(self, ctx: commands.Context):
        await ctx.send(f'—Ö—É—è–∑–∞')
        
    @commands.cooldown(rate=1, per=30, bucket=commands.Bucket.channel)
    @commands.command(name='–∞–Ω–µ–∫', aliases=['–∫—Ä–∏–Ω–∂'])
    async def anek(self, ctx: commands.Context):
        await ctx.send(GetRandAnek())
        
    @commands.cooldown(rate=1, per=10, bucket=commands.Bucket.member)
    @commands.command(name='–ø—Ä–∞–∑–¥–Ω–∏–∫', aliases=['holiday'])
    async def Holiday(self, ctx: commands.Context):
        await ctx.send(GetTodayHoliday())
    
    @commands.cooldown(rate=1, per=3600, bucket=commands.Bucket.channel)
    @commands.command(name='–¥—ã–Ω—è', aliases=['melon'])
    async def dinya(self, ctx: commands.Context):
        if (not ctx.channel.name == 'gufovicky'):
            return
        for kuplet in dinya:
            time.sleep(1.5)
            await ctx.send(kuplet.replace("\n", " "))
            
    @commands.cooldown(rate=1, per=1800, bucket=commands.Bucket.channel)
    @commands.command(name='—Ö—Ä—é–∫–æ–≤—Å–∫–∏–π')
    async def hrykovsciy(self, ctx: commands.Context):
        if (not ctx.channel.name == 'gufovicky'):
            return
        for kuplet in hrykovskiy:
            time.sleep(1.5)
            await ctx.send(kuplet.replace("\n", " "))
    
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @commands.command(name='—Ç–≥', aliases=['—Ç–µ–ª–µ–≥—Ä–∞–º', '—Ç–µ–ª–µ–≥–∞', 'telegram', 'tg'])
    async def telegram(self, ctx: commands.Context):
        msg = telegrams.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
    
    @commands.command(name='–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', aliases=['–≤–∫', 'vk', 'vkontakte'])
    async def vkontakte(self, ctx: commands.Context):
        msg = vks.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
            
    @commands.command(name='–±—É—Å—Ç–∏', aliases=['boosty'])
    async def boosty(self, ctx: commands.Context):
        msg = boostys.get(ctx.channel.name)
        if(not msg == None):
            await ctx.send(msg)
        
    @commands.command(name='help', aliases=['commands', '–∫–æ–º–∞–Ω–¥—ã', '–ø–æ–º–æ—â—å'])
    async def help_bot(self, ctx: commands.Context):
        await ctx.send(f'@{ctx.author.name} –Ø –±–æ—Ç –∏ —è –º–æ–≥—É: !–ø–∏–Ω–≥, !—á–º–æ–∫, !—á–º–æ, !–±–∞–∑–∞, !–∫—Ä–∏–Ω–∂, !–∞–Ω–µ–∫. –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö: !–≤–∫, !–±—É—Å—Ç–∏, !—Ç–≥')
        
    #–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ 
    @commands.command(name='–≥–æ—Ä—è—á–µ—Å—Ç—å', aliases=['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '—Ç–µ–º–ø', 'temp'])
    async def help_bot(self, ctx: commands.Context):
        if ctx.author.name in white_list:
            cpuT = CPUTemperature()
            await ctx.send(f'–ú–æ—è –≥–æ—Ä—è—á–µ—Å—Ç—å —Ä–∞–≤–Ω–∞ {cpuT.temperature} –≥—Ä–∞–¥—É—Å–∞–º')

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    async def event_command_error(self, ctx, error: Exception) -> None:
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f'–ö–æ–º–∞–Ω–¥–∞ "{error.command.name}" –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –µ—â–µ {int(error.retry_after)} —Å–µ–∫.')
        else:
            print(error)
    
    #–°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
    async def event_join(self, channel: Channel, user: User):
        print(f'{datetime.datetime.now()}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –≤–æ—à–µ–ª –≤ —á–∞—Ç {channel.name}')
        # if user.name == 'moobot':
        #     await channel.send(f'@{user.name}, —á–µ –ø—Ä–∏–ø–µ—Ä—Å—è?')
        if channel.name == user.name:
            await channel.send(f'@{user.name}, –ø—Ä–∏–≤–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä! üòò')
            print(f'{datetime.datetime.now()}: –°—Ç—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ {user.name}')

bot = Bot()
bot.run()
